# -*- coding: utf-8 -*-
"""
Created on Mon Jun 11 17:10:06 2018

@author: Matteo

Script to analyze shots for EPS 2018 from ASCOT.
(1) calculate orbit losses 
"""
import numpy as np
import ascot_particles
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
#==============================================
# SET TEXT FONT AND SIZE
#==============================================
#plt.rc('font', family='serif', serif='Palatino')
#plt.rc('text', usetex=True)
plt.rc('xtick', labelsize=20)
plt.rc('ytick', labelsize=20)
plt.rc('axes', labelsize=20)
plt.rc('figure', facecolor='white')
#==============================================
r_flag=1


homedir = '/home/vallar/'
rundir='ASCOT/runs/TCV/'

#homedir = 'C:\\Users\\Matteo\\Documents\\work'
#rundir = '\\ASCOT\\runs\\TCV\\'
d = {
     '58820': {
             'lab' : 'EC Ctr-Ip',
             'nt'     : 3,
             'h5'     : np.empty(3, dtype=object),
             'times'  : ['0.800', '1.250', '1.500'],
             'fnm_lab': ['0801', '1251', '1501'],
             'ECpow'  : np.array([0, 2.5e6, 1.8e6]),
             'pwall'  : np.array([0.17, 0.397, 0.39]),
             'ptot'   : np.array([0.535e6, 0.534e6, 0.536e6]),
             'color'  : 'k',
             'param1d':[],
             'rltr0': np.zeros(3)
             },
     '58823':{
             'lab' : 'Off-axis',
             'nt'     : 4,
             'h5'     : np.empty(4, dtype=object),
             'times'  : ['0.900', '1.250', '1.300', '1.500'],
             'fnm_lab': ['091', '251', '131', '151'],
             'ECpow'  : np.array([0, 2.5e6, 2.5e6, 1.8e6]),
             'pwall'  : np.array([ 0.18,  0.31,  0.30,  0.28]),
             'ptot'   : np.array([0.528e6, 0.537e6, 0.537e6, 0.532e6]),
             'color': 'r',
             'param1d':[],
             'rltr0': np.zeros(4)
             },
     '58832':{
             'lab' : 'On-axis',
             'nt'     : 5,
             'h5'     : np.empty(5, dtype=object),
             'times'  : ['0.800', '1.05', '1.16', '1.250', '1.500'],
             'fnm_lab': ['0801', '1051', '1161', '1251', '1501'],
             'ECpow'  : np.array([0, 0.9e6, 2e6, 2.5e6, 1.8e6]),
             'pwall'  : np.array([0.09, 0.16, 0.25, 0.31, 0.27]),
             'ptot'   : np.array([0.545e6, 0.568e6, 0.563e6, 0.557e6, 0.561e6]),
             'color'  : 'b',
             'param1d':[],
             'rltr0': np.zeros(5)
             },
     '59429':{
             'lab' : 'H-mode',
             'nt'     : 3,
             'h5'     : np.empty(4, dtype=object),
             'times'  : ['0.770', '0.84', '0.89'],#, '0.92'],
             'fnm_lab': ['771', '841', '891'],#, '921'],
             'ECpow'  : np.array([0.82e6, 1.275e6, 1.275e6]),
             'pwall'  : np.array([0.14, 0.14, 0.17]),
             'ptot'   : np.array([0.88e6, 0.91, 0.9]),
             'color'  : 'm',
             'param1d':[],
             'rltr0': np.zeros(3)
             },
     }


dd={'58820': {'ECpow': np.array([       0.,  2500000.,  1800000.]),
  'color': 'k',
  'fnm_lab': ['0801', '1251', '1501'],
  'h5': np.array([None, None, None], dtype=object),
  'lab': 'EC Ctr-Ip',
  'nt': 3,
  'param1d': np.array([  9.56937679,  18.31629933]),
  'ptot': np.array([ 535107.06851742,  534205.89882307,  536265.71102709]),
  'pwall': np.array([ 0.17338527,  0.39725469,  0.39033222]),
  'rltr0': np.array([  70149.83010828,  129753.09912822,  127644.22092611]),
  'times': ['0.800', '1.250', '1.500']},
 '58823': {'ECpow': np.array([       0.,  2500000.,  2500000.,  1800000.]),
  'color': 'r',
  'fnm_lab': ['091', '251', '131', '151'],
  'h5': np.array([None, None, None, None], dtype=object),
  'lab': 'Off-axis',
  'nt': 4,
  'param1d': np.array([  5.13223984,  18.0040448 ]),
  'ptot': np.array([ 528175.94663074,  537417.95245299,  537966.59786461,
          532588.13564142]),
  'pwall': np.array([ 0.17836651,  0.30987546,  0.30251301,  0.27839912]),
  'rltr0': np.array([  56265.58650536,  108216.56203301,   58142.41535602,
           55992.89438628]),
  'times': ['0.900', '1.250', '1.300', '1.500']},
 '58832': {'ECpow': np.array([       0.,   900000.,  2000000.,  2500000.,  1800000.]),
  'color': 'b',
  'fnm_lab': ['0801', '1051', '1161', '1251', '1501'],
  'h5': np.array([None, None, None, None, None], dtype=object),
  'lab': 'On-axis',
  'nt': 5,
  'param1d': np.array([ 8.93822447,  8.98902834]),
  'ptot': np.array([ 545672.3213957 ,  568809.82809464,  563593.53432984,
          557085.77118014,  561009.16792416]),
  'pwall': np.array([ 0.09260842,  0.16246624,  0.25082109,  0.31531466,  0.27179316]),
  'rltr0': np.array([ 35881.37891086,  51476.93203108,  76007.37402388,  95471.9643926 ,
          77879.05281893]),
  'times': ['0.800', '1.05', '1.16', '1.250', '1.500']},
 '59429': {'ECpow': np.array([  820000.,  1275000.,  1275000.]),
  'color': 'm',
  'fnm_lab': ['771', '841', '891'],
  'h5': np.array([None, None, None, None], dtype=object),
  'lab': 'H-mode',
  'nt': 3,
  'param1d': [],
  'ptot': np.array([ 889812.27130685,  908275.57865007,  904259.79181966]),
  'pwall': np.array([ 0.14953245,  0.14376989,  0.17983635]),
  'rltr0': np.array([ 63556.34879697,  48265.66509588,  64857.74768566]),
  'times': ['0.770', '0.84', '0.89']}}

if r_flag == 1:
    #Reading ascot files
    for el in d:
        shotdir = homedir+rundir+el+'/'
        for it in range(d[el]['nt']):
            fname = shotdir+'ascot_'+str(el)+str(d[el]['fnm_lab'][it])+'.h5'
            print(fname)
            p = ascot_particles.TCV_iniend(fname) 
            p.endcondition()
            p.plot_initial_wall_pos(phi_f=[-3.14,3.14], theta_f=[-2.40, 0.])
            #d[el]['h5'][it] = p 
            d[el]['pwall'][it] = p.plost_w/p.ptot_inj
            d[el]['ptot'][it]  = p.ptot_inj
            d[el]['rltr0'][it] = p.plost_rltr0

f = plt.figure()
ax=f.add_subplot(111)

for el in d:
    td = d[el]
    x,y = 1e-6*td['ECpow'], 100.*td['pwall']
    if el != '59429':
        p = np.polyfit(x,y,1)
        td['param1d'] = p
        xplot = np.linspace(min(x), max(x), 20)
        ax.plot(xplot, np.polyval(p,xplot), color=td['color'], linestyle='--', linewidth=2.3)

    ax.scatter(x,y, 50,color=td['color'], label=td['lab'])
    ax.set_xlabel('EC power [MW]'); ax.set_ylabel(r'$P_{wall}$ (%)')

# Create your ticker object with M ticks
M = 5
yticks = ticker.MaxNLocator(M)
xticks = ticker.MaxNLocator(M)
# tick positions with set_minor_locator.
ax.yaxis.set_major_locator(yticks)
ax.xaxis.set_major_locator(xticks)
#==================================

ax.legend(loc='lower right')
ax.grid('on')
# f = plt.figure()
# ax=f.add_subplot(111)

# for el in d:
#     td = d[el]
#     x,y = 1e-6*td['ECpow'], 100.*(td['rltr0']/td['ptot'])
#     ax.scatter(x,y, 50, marker='+', color=td['color'], label=td['lab'])
#     y = 100.*(td['pwall']*td['ptot']-td['rltr0'])/td['ptot']
#     ax.scatter(x,y,50, marker='*',color=td['color'], label=td['lab'])
#     ax.set_xlabel('EC power [MW]'); ax.set_ylabel(r'$P_{wall}(R<R_0)$ (%)')

# # Create your ticker object with M ticks
# M = 5
# yticks = ticker.MaxNLocator(M)
# xticks = ticker.MaxNLocator(M)
# # tick positions with set_minor_locator.
# ax.yaxis.set_major_locator(yticks)
# ax.xaxis.set_major_locator(xticks)
# #==================================

# #ax.legend(loc='lower right')
# ax.grid('on')

plt.show()


