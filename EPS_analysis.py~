# -*- coding: utf-8 -*-
"""
Created on Mon Jun 11 17:10:06 2018

@author: Matteo

Script to analyze shots for EPS 2018 from ASCOT.
(1) calculate orbit losses 
"""
import numpy as np
import ascot_particles
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
#==============================================
# SET TEXT FONT AND SIZE
#==============================================
#plt.rc('font', family='serif', serif='Palatino')
#plt.rc('text', usetex=True)
plt.rc('xtick', labelsize=20)
plt.rc('ytick', labelsize=20)
plt.rc('axes', labelsize=20)
plt.rc('figure', facecolor='white')
#==============================================
r_flag=0


homedir = '/home/vallar/'
rundir='ASCOT/runs/TCV/'

#homedir = 'C:\\Users\\Matteo\\Documents\\work'
#rundir = '\\ASCOT\\runs\\TCV\\'
d = {
     '58820': {
             'lab' : 'EC Ctr-Ip',
             'nt'     : 3,
             'h5'     : np.empty(3, dtype=object),
             'times'  : ['0.800', '1.250', '1.500'],
             'fnm_lab': ['0801', '1251', '1501'],
             'ECpow'  : np.array([0, 2.5e6, 1.8e6]),
             'pwall'  : np.array([0.17, 0.397, 0.39]),
             'ptot'   : np.array([0.535e6, 0.534e6, 0.536e6]),
             'color'  : 'k',
             'param1d':[]
             },
     '58823':{
             'lab' : 'Off-axis',
             'nt'     : 4,
             'h5'     : np.empty(4, dtype=object),
             'times'  : ['0.900', '1.250', '1.300', '1.500'],
             'fnm_lab': ['091', '251', '131', '151'],
             'ECpow'  : np.array([0, 2.5e6, 2.5e6, 1.8e6]),
             'pwall'  : np.array([ 0.18,  0.31,  0.30,  0.28]),
             'ptot'   : np.array([0.528e6, 0.537e6, 0.537e6, 0.532e6]),
             'color': 'r',
             'param1d':[]
             },
     '58832':{
             'lab' : 'On-axis',
             'nt'     : 5,
             'h5'     : np.empty(5, dtype=object),
             'times'  : ['0.800', '1.05', '1.16', '1.250', '1.500'],
             'fnm_lab': ['0801', '1051', '1161', '1251', '1501'],
             'ECpow'  : np.array([0, 0.9e6, 2e6, 2.5e6, 1.8e6]),
             'pwall'  : np.array([0.09, 0.16, 0.25, 0.31, 0.27]),
             'ptot'   : np.array([0.545e6, 0.568e6, 0.563e6, 0.557e6, 0.561e6]),
             'color'  : 'b',
             'param1d':[]
             },
     '59429':{
             'lab' : 'H-mode',
             'nt'     : 3,
             'h5'     : np.empty(4, dtype=object),
             'times'  : ['0.770', '0.84', '0.89'],#, '0.92'],
             'fnm_lab': ['771', '841', '891'],#, '921'],
             'ECpow'  : np.array([0.82e6, 1.275e6, 1.275e6]),
             'pwall'  : np.array([0.14, 0.14, 0.17]),
             'ptot'   : np.array([0.88e6, 0.91, 0.9]),
             'color'  : 'm',
             'param1d':[]
             },
     }
if r_flag == 1:
    #Reading ascot files
    for el in d:
        shotdir = homedir+rundir+el+'/'
        for it in range(d[el]['nt']):
            fname = shotdir+'ascot_'+str(el)+str(d[el]['fnm_lab'][it])+'.h5'
            print(fname)
            p = ascot_particles.TCV_iniend(fname) 
            p.endcondition()
            d[el]['h5'][it] = p 
            d[el]['pwall'][it] = p.plost_w/p.ptot_inj
            d[el]['ptot'][it]  = p.ptot_inj
        

f = plt.figure()
ax=f.add_subplot(111)

for el in d:
    td = d[el]
    x,y = 1e-6*td['ECpow'], 100.*td['pwall']
    p = np.polyfit(x,y,1)
    td['param1d'] = p
    xplot = np.linspace(min(x), max(x), 20)

    ax.scatter(x,y, 50,color=td['color'], label=td['lab'])
    ax.plot(xplot, np.polyval(p,xplot), color=td['color'], linestyle='--', linewidth=2.3)
    ax.set_xlabel('EC power [MW]'); ax.set_ylabel(r'$P_{wall}$ (%)')

# Create your ticker object with M ticks
M = 5
yticks = ticker.MaxNLocator(M)
xticks = ticker.MaxNLocator(M)
# tick positions with set_minor_locator.
ax.yaxis.set_major_locator(yticks)
ax.xaxis.set_major_locator(xticks)
#==================================

ax.legend(loc='lower right')
ax.grid('on')
plt.show()
